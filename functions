##
# Custom Functions
##################

tes() {
  [[ $@ ]]; echo $?
}

teso() {
  test $@; echo $?
}

jgrep() {
  cat $1 | jq $2
}

cvim() {
  cd $1 && vim
}

extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1     ;;
      *.tar.gz)    tar xzf $1     ;;
      *.bz2)       bunzip2 $1     ;;
      *.rar)       unrar e $1     ;;
      *.gz)        gunzip $1      ;;
      *.tar)       tar xf $1      ;;
      *.tbz2)      tar xjf $1     ;;
      *.tgz)       tar xzf $1     ;;
      *.zip)       unzip $1       ;;
      *.Z)         uncompress $1  ;;
      *.7z)        7z x $1        ;;
      *)     echo "'$1' cannot be extracted via extract()" ;;
       esac
   else
       echo "'$1' is not a valid file"
   fi
}

vd() {
  cd $1; vim
}

npmrepo() {
  npm info $1 repository.url
}

npmclone() {
   npmrepo $1 | xargs git clone
}

npmopen() {
  npmrepo $1 | sed "s/.git$//" | sed "s/git:/https:/" | xargs open
}

npmsummary() {
  npm info $1 version repository.url
}

pjgrep() {
  cat package.json | jq .$1
}

openl() {
  open http://localhost:$1
}

gitdelremotebranch() {
  git branch -D $1; git push origin :$1
}

gitdelremotetag() {
  git push origin :refs/tag/$1
}

ftpgetall() {
  # ftp://username:password@host/dir
  wget -r ftp://$1@$2/$3
}

ctagsproj() {
  if [ -d ./.git/ ] ; then
    ctags -R -f ./.git/.tags
  else
    ctags -R -f .tags
  fi
}

visnip() {
  vi $1.snippets
}

# Check which process is listening to what port no
# $ lport 8008
port() {
  lsof -i :$1
}

kport() {
  port $1 | awk 'FNR==2 { print $2 }'| xargs kill -9 && port $1
}

agmatch() {
  ag $1 -G $2 $3 $4
}

dmenvset() {
  eval "$(docker-machine env $1)"
}

bbwatch() {
  babel --presets es2015,react --watch $1 --out-dir $2
}

bbwatch5() {
  babel --watch $1 --out-dir $2
}

browsersyncfiles() {
  echo $1
  browser-sync start --server --files="$1"
}

browsersyncproxy() {
  if [[ $2 =~ [0-9]+ ]]; then
    browser-sync start --proxy "$1:$2" --files "$3"
  else
    browser-sync start --proxy "$1" --files "$2"
  fi
}

nmod() {
  cd node_modules/$1
}

bbuser() {
  output=$(npm run user $1 2>&1)
  echo "$output"
  echo "$output" | grep User: |  awk '{print $2}' | sed 's/,$//' | pbcopy
}

addprettier() {
  yarn add eslint prettier eslint-plugin-prettier eslint-config-prettier babel-eslint --dev
  printf '{\n  "parser": "babel-eslint",\n  "plugins": ["prettier"],\n  "rules": {\n    "prettier/prettier": "error"\n  }\n}' > .eslintrc
  printf '{\n  "semi": false,\n  "singleQuote": true\n}' > .prettierrc
}

# find
fname() {
  find . -name "$1"
}

fdir() {
  find . -type d -name "$1"
}

ffile() {
  find . -type f -name "$1"
}

b64() {
  echo "$1" | base64 | pbcopy
  pbpaste
}

b64d() {
  echo "$1" | base64 -D | pbcopy
  pbpaste
}

agfrm() {
  agf $1 | xargs rm
}

if [ -f ~/.aliases.local ]; then
  . ~/.aliases.local
fi
