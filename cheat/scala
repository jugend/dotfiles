# Overview

$ scala
Welcome to Scala version 2.11.7 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_31).
Type in expressions to have them evaluated.
Type :help for more information.

scala>

# Variables

#### Mutable variables

var x = 0
x = 1 // ok: x is now 1

#### Immutable variables

val y = 0
y = 1 // error: y is immutable!

### Classes

#### Regular classes

class Greeter(private var myGreeting:String = "Hello", private var myTarget:String = "World") { // constructor with two optional arguments
  def greeting = myGreeting // getter
  def greeting_=(g: String) { myGreeting = g } // method name is literally "greeting ="
  def target = myTarget // getter
  def target_=(t: String) { myTarget = t } // method name is literally "target ="
  def greet = myGreeting + ", " + myTarget + "!" // one-liner method
  override def toString = greet // override base class's toString method
}

val g = new Greeter
g.greet
g.greeting =("Hi")
g greeting =("Hi") // same as above
g greeting = "Hi"  // same as above
g.greeting = "Hi"  // same as above
g.greet

#### Companion classes

Define class & companion class (note the `:paste` is required by the Scala shell, because companion classes must be defined with their conventional class):

:paste
class Greeter(private var myGreeting:String = "Hello", private var myTarget:String = "World") { // constructor with two optional arguments
  def greeting = myGreeting // getter
  def greeting_=(g: String) { myGreeting = g } // method name is literally "greeting ="
  def target = myTarget // getter
  def target_=(t: String) { myTarget = t } // method name is literally "target ="
  def greet = myGreeting + ", " + myTarget + "!" // one-liner method
  override def toString = greet // override base class's toString method
}
object Greeter {
  def apply(greeting: String = "Howdy", target: String = "Y'all")
    = new Greeter(greeting, target)
}
// now type Ctrl-D to finish declaration of class & companion

Use companion class:

val g = Greeter() // no "new" required; "apply" method is called on companion

#### Case classes

Scala provides convenient, immutable classes with getters, equals, hash code & stringify methods called "case classes".

case class Greeter(val greeting: String = "Hello", val target: String = "World") {
  def greet = greeting + ", " + target + "!"
}

val g = Greeter()
g.greeting // getter
g.target // getter
g.toString // "Greeter(Hello,World)"
g.greet // "Hello, World!"
val h = Greeter("Howdy", "Y'all")
h.toString // "Greeter(Howdy,Y'all)"
h.greet // "Howdy, Y'all!"
val i = Greeter("Hello","World")
g == h // false
g == i // true

### Traits

abstract class Pet(val name:String)
trait CanBark { def bark { println("Bark!") } }
trait CanMeow { def meow { println("Meow!") } }
trait CanFly { def fly(altitude:Int) { println(s"I'm flying at $altitude m!")}}

class BarkingCat(name:String) extends Pet(name) with CanMeow with CanBark
class MeowingDog(name:String) extends Pet(name) with CanBark with CanMeow
class WildFlyingMonkey(val name:String, val defaultAltitude:Int = 1000) extends CanFly {
  def fly() { fly(defaultAltitude) }
}

val cat = new BarkingCat("Butch")
cat.meow // Meow!
cat.bark // Bark!
cat.isInstanceOf[Pet] // true
cat.isInstanceOf[BarkingCat] // true
cat.isInstanceOf[CanMeow] // true
cat.isInstanceOf[CanBark] // true
cat.isInstanceOf[CanFly] // false
val dog = new MeowingDog("Fifi")
dog.bark // Bark!
dog.meow // Meow!
val monkey = new WildFlyingMonkey("Albert", 10000)
monkey.fly // I'm flying at 10000 m!
monkey.fly(10) // I'm flying at 10 m!
val flyingCat = new BarkingCat("Crazy") with CanFly // define class with trait at run-time!
flyingCat.fly(100) // I'm flying at 100 m!
flyingCat.isInstanceOf[CanFly] // true

### Functions/Closures

val factor = 2
def fun(x:Int) = factor * x // closes over in-scope variable "factor"

fun(0) // 0
fun(1) // 2
fun(2) // 4

#### Anonymous functions

Functions don't have to have names & they can be passed around like data.  They're defined with the `=>` syntax, which takes an argument list on the left, the `=>` symbol, then the body.

def doSomething(fn:(Int) => Int, y:Int) = fn(y)

The type of `fn` can be read "a function that takes an `Int` and returns an `Int`".

Provide an anonymous function to `doSomething`:

doSomething((x:Int) => 2 * x, 3) // 6

The anonymous function is `(x:Int) => 2 * x`, and we're passing `3` for `y`.  Try another:

doSomething((x:Int) => -x, 1) // -1

### Tuples

Scala provides tuples, which are singles, pairs, triplets, quadruplets, quintuplets, etc. of data (up to 22 members) which are agnostic toward the data's type, and they're denoted by parentheses.  They have member access methods `_1()`, `_2()`, etc., up to `_22` â€” notice that they're one-based.

Define a tuple with three members:

val triplet = ("one", 2.0, true)

The type of `triplet` is expressed as `(String, Double, Boolean)`.  Now, access `triplet`'s members:

triplet._1 // "one"
triplet._2 // 2.0
triplet._3 // true

### Options

Scala only offers the `Null` trait for use with Java libraries that make use of Java's `null`.  In the absence of nullability, Scala provides `Option`.  It has two case subclasses, `Some` to represent the presence of a value, and `None` to represent the absence of a value.

val s: Option[Int] = Some(1)
val n: Option[Int] = None

s.isDefined // true
s.isEmpty // false
s.get // 1
n.isDefined // false
n.isEmpty // true
n.get // throws java.util.NoSuchElementException
n.getOrElse(-1) // -1 (good way to provide default value)

### Collections

Scala offers a rich collection library with many interesting methods in mutable and immutable versions; unless you specify with `import scala.collections.mutable`, you get the immutable versions.

There are three basic types, all of which descend from `Iterable`, which descends from  `Traversable`:

- `Seq`, an ordered collection
- `Set`, an unordered collection which contains no duplicates
- `Map`, key-value pairs, or a collection of values each of which is accessible via a key

Here's a quick overview of the Scala immutable collections (from http://docs.scala-lang.org/overviews/collections/overview.html):

![Immutable Collections](collections.immutable.png)

#### Processing collections

All of the methods you'd expect on collections are present.  Some of the more interesting methods are illustrated below.

##### Map:  transform elements

``` scala
val values = List(1, 2, 3, 4, 5, 6)
val plusones = values.map(x => x + 1) // List(2, 3, 4, 5, 6, 7)
val plusones2 = values.map(_ + 1) // same, except uses _ placeholder
val strings = values.map(_.toString) // List("1", "2", "3", "4", "5", "6")
```

##### Reduce:  combine elements

``` scala
val values = List(1, 2, 3, 4, 5, 6)
val sum = values.reduce((a, b) => a + b) // 21
val sum2 = values.reduce(_ + _) // 21 using shorthand
val factorial = values.reduce(_ * _) // 720
```

##### Sort:  order elements

``` scala
val values = List(1, 2, 3, 4, 5, 6)
val reversed = values.sortBy(x => -x) // List(6, 5, 4, 3, 2, 1)
val reversed2 = values.sortBy(-_) // same, except uses placeholder
  
val tuples = List((1, "foo"), (2, "bar"), (3, "sna"), (4, "fu"), (5, "beetlejuice"))

val sortedByReverseKey = tuples.sortBy(t => -t._1)
  // List((5,beetlejuice), (4,fu), (3,sna), (2,bar), (1,foo))
val sortedByReverseKey2 = tuples.sortBy(-_._1) // same, shorthand

val sortedByValue = tuples.sortBy(t => t._2)
  // List((2,bar), (5,beetlejuice), (1,foo), (4,fu), (3,sna))
val sortedByValue2 = tuples.sortBy(_._2) // same, shorthand
```

##### Filter:  select elements

``` scala
val values = List(1, 2, 3, 4, 5, 6)
val evens = values.filter(_ % 2 == 0) // List(2, 4, 6)
val odds = values.filter(_ % 2 != 0) // List (1, 3, 5)
```

