snippet rdebug "req.log('debug', ...)" b
req.log('debug', ${1:Object});
endsnippet

snippet rinfo "req.log('info', ...)"
req.log('info', ${1:Object});
endsnippet

snippet rerror "req.log('error', ...)"
req.log('error', ${1:Object});
endsnippet

# jQuery
snippet aj:get "$.ajax({type: 'POST'...})"
$.ajax({
  url: ${1:url},
  dataType: '${2:json}',
  cache: false,
  success: function(data) {
    $3
  }.bind(this),
  error: function(xhr, status, err) {
    $4
  }.bind(this)
});
endsnippet

snippet aj:post "$.ajax({type: 'POST'...})"
$.ajax({
  url: ${1:url},
  dataType: '${2:json}',
  type: '${3:POST}',
  data: ${4:data},
  success: function(data) {
    $5
  }.bind(this),
  error: function(xhr, status, err) {
    $6
  }.bind(this)
});
endsnippet

# Express
snippet ex:server "Express: Server"
var path = require('path');
var express = require('express');
var bodyParser = require('body-parser');
var app = express();

app.set('port', (process.env.PORT || 3000));

app.use('/', express.static(path.join(__dirname, 'public')));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended: true}));

app.get('/', function(req, res) {
  res.send('hello');
});

app.listen(app.get('port'), function() {
  console.log('Server started: http://localhost:' + app.get('port') + '/');
});
endsnippet

# ES6
snippet e:im "import Object from 'path'"
import ${1:Object} from '${2:path}';
endsnippet

snippet e:ed "export default"
export default $1
endsnippet

snippet e:edclass "export default class Class extends Parent"
export default class ${1:ClassName} extends ${2:Parent} {
  $3
}
endsnippet

snippet e:con "constructor() {}"
constructor(${1:props}) {
  super(${2:props});
  $3
}
endsnippet

snippet e:f "function() { }"
${1:function}($2) {
  $3
}
endsnippet

snippet e:ren "render() { }"
render() {
  return (
    ${1:<div />}
  )
}
endsnippet

snippet () "() =>" i
($1) => {
  $2
}
endsnippet

# React: ES6

snippet r:icom "import React, {Component}"
import React, {Component} from 'react';

endsnippet

snippet r:ccom "class ClassName extends Component"
class ${1:ClassName} extends Component {
  render() {
	return (
	  $2
	);
  }
}
endsnippet

snippet r:ret "return ( ... )"
return (
  $1
);
endsnippet

# React: ES5
snippet re:req "require('react')"
  var React = require('react');
endsnippet

# Common Snippets

snippet todo "TODO"
// TODO: ${1:Description}
endsnippet

snippet varc "var ClassName = require('path')"
var ${1:ClassName} = require('${2:path}');
endsnippet

snippet funcc "(function() { ... })()"
(function() {
  $1
})();
endsnippet

snippet frr "function(req, res) {}" i
function(req, res) {
  $1
}
endsnippet

snippet frrn "function(req, res, next) {}" i
function(req, res, next) {
  $1
}
endsnippet

snippet fer "function(err) { ... }" i
function(${1:err}) {
  $2

endsnippet

snippet ferr "function(err, res) { ... }" i
function(${1:err}, ${2:res}) {
  $3
}
endsnippet

snippet ferrn "function(err, req, res, next) {}" i
function(err, req, res, next) {
  $1
}
endsnippet

snippet fe "function(e) { ... }" i
function(e) {
    $1
}
endsnippet

snippet for:ar "for (var i = 0; i < array.lengh; i++) { ... }"
for (var i = 0; i < ${1:length}; i++) {
  $1
}
endsnippet

snippet fbind "function() { ... }.bind(this)" i
function($1) {
    $2
}.bind(this)
endsnippet

# console.log
snippet cl "console.log(object)"
console.log(${1:object});
endsnippet

snippet cli "console.info(object)"
console.info(${1:object});
endsnippet

snippet cle "console.error(object)"
console.error(${1:object});
endsnippet

snippet cldiv "console.info('============')"
console.log('==================================================');
endsnippet

snippet clo "console.log('message', object)"
console.log('${1:message}', ${2:object});
endsnippet

snippet clm "console.log('message')"
console.log('${1:message}');
endsnippet

# Node.js Snipppets

snippet modex "module.exports = ClassName"
module.exports = ${1:ClassName};
endsnippet

# Mocha
snippet describe "Mocha describe"
describe("`!p snip.rv = fn.split(os.extsep)[0]`", function() {
  $0
});
endsnippet

snippet desc "Mocha describe verbose"
describe("${1:`!p snip.rv = fn.split(os.extsep)[0]`}", function() {
  $0
});
endsnippet

snippet it "Mocha it"
it("${1:It}", function() {
  $0
});
endsnippet

snippet bee "Mocha beforeEach"
beforeEach(function() {
  $0
});
endsnippet

snippet afe "Mocha afterEach"
afterEach(function() {
  $0
});
endsnippet

snippet before "Mocha before"
before(function(done) {
  $0
});
endsnippet

snippet after "Mocha after"
after(function(done) {
  $0
});
endsnippet
