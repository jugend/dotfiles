# Javascript
snippet = "===" i
=== $1
endsnippet

snippet :a "key: [...]" i
${1:key}: [$2]$3
endsnippet

snippet :o "key: {...}" i
${1:key}: \{$2\}$3
endsnippet

snippet :s "key: ..." i
${1:key}: "$2"$3
endsnippet

snippet els "else { ... }" i
else {
  $1
}
endsnippet

snippet def "default:" b
default:
  $1
endsnippet

snippet switch "switch(var) { ... }" b
switch($1) {
  case $2:
    $3
    break;
  case $4:
    $5
    break;
}
endsnippet

snippet swret "switch(var) { case a: return x;... }" b
switch($1) {
  case $2:
    return $3;
  case $4:
    return $5;
}
endsnippet

snippet fcall "funcName( ... )" i
${1:name}($2);
endsnippet

snippet fcallo "funcName({ ... })" i
${1:name}({
  $2
});
endsnippet

snippet finv "(function() { ... })()"
(function() {
  $1
})();
endsnippet

snippet rete "return;" b
return;
endsnippet

snippet reto "return { ... }"
return {
  $2
};
endsnippet

snippet fore "forEach(function(item) { ... })" i
forEach(function(${1:item}) {
  $2
});
endsnippet

snippet forn "forEach(function name(item) { ... })" i
forEach(function ${1:name}(${2:item}) {
  $3
});
endsnippet

snippet foren "forEach((item) => { ... })" i
forEach((${1:item}) => {
  $2
});
endsnippet

snippet fornn "forEach(name(item) => { ... })" i
forEach(${1:name}(${2:item}) => {
  $3
});
endsnippet

snippet the "then(function() { ... })" i
then(function($1) {
  $2
})
endsnippet

snippet thd "then(function() { ... })" i
then(function($1) {
  $2
  done();
})
endsnippet
snippet cat "catch(function(err) { ... })" i
catch(function(err) {
  $1
})
endsnippet

snippet catd "catch(function(err) { ... })" i
catch(function(err) {
  done(err);
});
endsnippet

# Kraken
snippet rdebug "req.log('debug', ...)" b
req.log('debug', ${1:Object});
endsnippet

snippet rinfo "req.log('info', ...)"
req.log('info', ${1:Object});
endsnippet

snippet rerror "req.log('error', ...)"
req.log('error', ${1:Object});
endsnippet

# jQuery
snippet ajget "$.ajax({type: 'POST'...})"
$.ajax({
  url: ${1:url},
  dataType: '${2:json}',
  cache: false,
  success: function(data) {
    $3
  }.bind(this),
  error: function(xhr, status, err) {
    $4
  }.bind(this)
});
endsnippet

snippet ajpost "$.ajax({type: 'POST'...})"
$.ajax({
  url: ${1:url},
  dataType: '${2:json}',
  type: '${3:POST}',
  data: ${4:data},
  success: function(data) {
    $5
  }.bind(this),
  error: function(xhr, status, err) {
    $6
  }.bind(this)
});
endsnippet

# Express
snippet exserver "Express: Server"
var path = require('path');
var express = require('express');
var bodyParser = require('body-parser');
var app = express();

app.set('port', (process.env.PORT || 3000));

app.use('/', express.static(path.join(__dirname, 'public')));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended: true}));

app.get('/', function(req, res) {
  res.send('hello');
});

app.listen(app.get('port'), 'localhost', function(err) {
  if (err) {
	console.log(err);
	return;
  }

  console.log('Server started: http://localhost:' + app.get('port') + '/');
});
endsnippet

snippet pjoin "path.join(__dirname, 'lib')" i
path.join(__dirname, '${1:lib}')
endsnippet

# ES6
snippet im "import object from 'lib'"
import ${1:object} from '${2:lib}';
endsnippet

snippet ime "import object from 'object'"
import ${1:object} from '$1';
endsnippet

snippet imd "import { object } from 'lib'"
import \{ ${1:object} \} from '${2:lib}';
endsnippet

snippet im* "import * as object from 'lib'"
import * as ${1:object} from '${2:lib}';
endsnippet

snippet clex "class ClassName extends Parent"
class ${1:ClassName} extends ${2:Parent} {
  $3
}
endsnippet

snippet ex "export" b
export $1
endsnippet

snippet excon "export const" b
export const $1 = '$2';
endsnippet

snippet exfun "export function name() { ... }" b
export function ${1:name}($2) {
  $3
};
endsnippet

snippet exd "export default"
export default $1;
endsnippet

snippet exdfun "export default function funcName() { ... }"
export default function ${1:name}(${2:arg}) {
  $3
};
endsnippet

snippet exdclas "export default class"
export default class ${1:ClassName} {
  $2
};
endsnippet

snippet exdcpar "export default class Class extends Parent"
export default class ${1:ClassName} extends ${2:Parent} {
  $3
};
endsnippet

snippet let "let name = value" b
let ${1:name} = ${2:value};
endsnippet

snippet lets "let { name } = value" b
let \{ ${1:name} \} = ${2:value};
endsnippet

snippet con "const name = value" b
const ${1:name} = ${2:value};
endsnippet

snippet cond "const { name } = value" b
const \{ ${1:name} \} = ${2:value};
endsnippet

snippet conda "const [ name ] = value" b
const [ ${1:name} ] = ${2:value};
endsnippet

snippet var "var name = value" b
var ${1:name} = ${2:value};
endsnippet

snippet stat "static name = value" b
static ${1:name} = ${2:value};
endsnippet

snippet const "constructor() {}"
constructor(${1:props}) {
  super(${2:props});
  $3
}
endsnippet

snippet fn "function() { }" i
function($1) {
  $2
}
endsnippet

snippet fnam "function name() { }" i
function ${1:name}($2) {
  $3
}
endsnippet

snippet )= "1 => 2" i
$1 => $2
endsnippet

snippet ()= "(1) => 2" i
($1) => $2
endsnippet

snippet (){} "(1) => { ... }" i
($1) => {
  $2
}
endsnippet

snippet ()=> "(1) => \n\t 2" i
($1) =>
  $2
endsnippet

snippet oass "Object.assign()" i
Object.assign($1)
endsnippet

snippet rsp "{' '}" b
{' '}
endsnippet

# React: ES6

snippet rim "import React, { Component, PropTypes }"
import React, { Component, PropTypes$1 } from 'react';
$2
endsnippet

snippet rimd "import ReactDOM"
import ReactDOM from 'react-dom';

endsnippet

snippet rimi "import {IntlProvider, FormattedNumber, FormattedPlural}" b
import ${1:IntlProvider}${2:, FormattedNumber}${3:, FormattedPlural }from 'react-intl';

endsnippet

snippet rcla "class ClassName extends Component"
class ${1:ClassName} extends Component {
  $2
}
endsnippet

snippet rprop "ClassName.propTypes = {}"
${1:ClassName}.propTypes = {
  $2
}
endsnippet

snippet propc "props.children" i
props.children
endsnippet

# React: PropTypes
snippet rpo "PropTypes.object"
PropTypes.object
endsnippet

snippet rpor "PropTypes.object.isRequired"
PropTypes.object.isRequired
endsnippet

snippet rps "PropTypes.string"
PropTypes.string
endsnippet

snippet rpsr "PropTypes.string.isRequired"
PropTypes.string.isRequired
endsnippet

snippet rpn "PropTypes.number"
PropTypes.number
endsnippet

snippet rpnr "PropTypes.number.isRequired"
PropTypes.number.isRequired
endsnippet

snippet rpb "PropTypes.bool"
PropTypes.bool
endsnippet

snippet rpbr "PropTypes.bool.isRequired"
PropTypes.bool.isRequired
endsnippet

snippet rpf "PropTypes.func"
PropTypes.func
endsnippet

snippet rpfr "PropTypes.func.isRequired"
PropTypes.func.isRequired
endsnippet

snippet rpb "PropTypes.array"
PropTypes.array
endsnippet

snippet rpbr "PropTypes.array.isRequired"
PropTypes.array.isRequired
endsnippet

# Methods
snippet rcon "constructor(props, context) { ... }"
constructor(props, context) {
  super(props, context);
  $1
}

endsnippet

snippet rcprop "const { ... } = this.props" i
const { $1 } = this.props;
endsnippet

snippet rret "return ( ... )"
return (
  $1
);
endsnippet

snippet rren "render() { ... }"
render() {
  return (
    ${1:<div />}
  )
}
endsnippet

snippet rrenv "render() { statement; return( ... ) }"
render() {
  $1
  return (
    ${2:<div />}
  )
}
endsnippet

# React: ES5
snippet rs "{' '}" b
{' '}
endsnippet

snippet rreq "require('react')"
  var React = require('react');
endsnippet

# Common Snippets

snippet ctodo "TODO"
// TODO: ${1:Description}
endsnippet

snippet varr "name lib = require('path')"
var ${1:lib} = require('${2:path}');
endsnippet

snippet frr "function(req, res) {}" i
function(req, res) {
  $1
}
endsnippet

snippet fprr "function(resolve, reject) {}" i
function(resolve, reject) {
  $1
}
endsnippet

snippet frrn "function(req, res, next) {}" i
function(req, res, next) {
  $1
}
endsnippet

snippet fer "function(err) { ... }" i
function(err) {
  $1

endsnippet

snippet ferr "function(err, res) { ... }" i
function(err, ${1:res}) {
  $2
}
endsnippet

snippet ferrn "function(err, req, res, next) {}" i
function(err, req, res, next) {
  $1
}
endsnippet

snippet fne "function(e) { ... }" i
function(e) {
  $1
}
endsnippet

snippet fdone "function(done) { ... }" i
function(done) {
  $1
}
endsnippet

snippet for:ar "for (var i = 0; i < array.lengh; i++) { ... }"
for (var i = 0; i < ${1:length}; i++) {
  $1
}
endsnippet

snippet fbind "function() { ... }.bind(this)" i
function($1) {
  $2
}.bind(this)
endsnippet

# console.log
snippet cl "console.log(object)"
console.log(${1:object});
endsnippet

snippet cli "console.info(object)"
console.info(${1:object});
endsnippet

snippet cle "console.error(object)"
console.error(${1:object});
endsnippet

snippet cldiv "console.info('============')"
console.log('==================================================');
endsnippet

snippet clo "console.log('message', object)"
console.log('${1:message}', ${2:object});
endsnippet

snippet clm "console.log('message')"
console.log('${1:message}');
endsnippet

snippet cg "console.group('name')" b
console.group('${1:name}')
endsnippet

snippet cge "console.groupEnd('name')" b
console.groupEnd('${1:name}')
endsnippet

snippet ct "console.time('name')" b
console.time('${1:name}')
endsnippet

snippet cte "console.timeEnd('name')" b
console.timeEnd('${1:name}')
endsnippet

# Node.js Snipppets

snippet req "require('module')" i
require('$1');
endsnippet

snippet modx "module.exports = ClassName"
module.exports = ${1:ClassName};
endsnippet

# Mocha
snippet desc "Mocha: describe verbose"
describe('${1:`!p snip.rv = fn.split(os.extsep)[0]`}', function() {
  $0
});
endsnippet

snippet mdesc "Mocha: describe verbose"
describe('${1:`!p snip.rv = fn.split(os.extsep)[0]`}', () => {
  $0
});
endsnippet

snippet itp "Mocha: it (pending)"
it('${1:desc}');
endsnippet

snippet mitp "Mocha: it (pending)"
it('${1:desc}');
endsnippet

snippet it "Mocha: it"
it('${1:desc}', function() {
  $0
});
endsnippet

snippet mit "Mocha: it"
it('${1:desc}', () => {
  $0
});
endsnippet

snippet ita "Mocha: it (async)"
it('${1:desc}', function(done) {
  $0
  done();
});
endsnippet

snippet mita "Mocha: it (async)"
it('${1:desc}', (done) => {
  $0
  done();
});
endsnippet

snippet befo "Mocha: before"
before(function() {
  $0
});
endsnippet

snippet mbefo "Mocha: before"
before(() => {
  $0
});
endsnippet

snippet befa "Mocha: before (async)" i
before(function(done) {
  $0
});
endsnippet

snippet mbefa "Mocha: before (async)" i
before((done) => {
  $0
});
endsnippet

snippet aftr "Mocha: after"
after(funckktion() {
  $0
});
endsnippet

snippet maftr "Mocha: after"
after(() => {
  $0
});
endsnippet

snippet afta "Mocha: after (async)"
after(function(done) {
  $0
});
endsnippet

snippet mafta "Mocha: after (async)"
after((done) => {
  $0
});
endsnippet

snippet befe "Mocha: beforeEach"
beforeEach(function() {
  $0
});
endsnippet

snippet mbefe "Mocha: beforeEach"
beforeEach(() => {
  $0
});
endsnippet

snippet befea "Mocha: beforeEach (async)"
beforeEach(function(done) {
  $0
});
endsnippet

snippet mbefea "Mocha: beforeEach (async)"
beforeEach((done) => {
  $0
});
endsnippet

snippet afte "Mocha: afterEach"
afterEach(function() {
  $0
});
endsnippet

snippet mafte "Mocha: afterEach"
afterEach(() => {
  $0
});
endsnippet

snippet aftea "Mocha: afterEach (done)"
afterEach(function(done) {
  $0
});
endsnippet

snippet maftea "Mocha: afterEach (done)"
afterEach((done) => {
  $0
});
endsnippet

snippet do "done()" b
done();
endsnippet

snippet derr "done(err)" b
done(err);
endsnippet

# chai
snippet cas "var assert = require('chai').assert;" do
var assert = require('chai').assert;
$1
endsnippet

# expect
snippet exp "expect()" b
expect($1).${2}($3);
endsnippet

snippet expe "expect().toEqual()" b
expect($1).toEqual($2);
endsnippet

snippet expb "expect().toBe()" b
expect($1).toBe($2);
endsnippet

snippet expc "expect().toHaveBeenCalledWith()" b
expect($1).toHaveBeenCalledWith($2)
endsnippet

# expect - Spy
snippet exps "expect.createSpy()" i
expect.createSpy()
endsnippet

# web driver
snippet wdful "nemo.wd.promise.fulfilled().then(function() {})" b
return nemo.wd.promise.fulfilled().then(function() {
  $1
});
endsnippet

snippet thenc "thenc" i
.thenCatch(function(err) {
  $1
})
endsnippet

#Promise
snippet thenf ".then(function() {})" i
then(function($1) {
  $2
});
endsnippet
